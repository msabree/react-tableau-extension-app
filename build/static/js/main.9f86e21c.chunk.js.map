{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["UPLOAD_URL","App","useState","dataSource","updateDataSource","useEffect","window","tableau","extensions","initializeAsync","length","then","console","log","dashboardContent","dashboard","worksheets","find","worksheet","name","getDataSourcesAsync","dataSources","getUnderlyingDataAsync","dataTable","data","columns","i","locationNameIndex","findIndex","col","fieldName","locationNumberIndex","forecastIndex","row","location_number","value","location_name","budget_year","on_deck_or_flag","budget_year_confirmed","comments","operator_status","region","site_status","construction_start","open_date","forecast","operator_name","activation_date","contract_type_group","location_type","project_category","risk_weight_string","push","cloneDeep","catch","err","createXlxsFile","wb","XLSX","utils","book_new","Props","Title","Subject","Author","CreatedDate","Date","SheetNames","ws_data","nextRow","rowValues","Object","values","j","ws","aoa_to_sheet","Sheets","wbout","write","bookType","type","fetch","method","body","Blob","s","buf","ArrayBuffer","view","Uint8Array","charCodeAt","s2ab","setTimeout","refreshAsync","className","style","maxWidth","editable","onRowUpdate","newData","oldData","Promise","resolve","reject","index","indexOf","title","field","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9f86e21c.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport MaterialTable from 'material-table';\nimport cloneDeep from 'lodash/cloneDeep';\nimport XLSX from 'xlsx';\nimport './App.css';\n\nconst UPLOAD_URL = 'https://tableau-write-back.herokuapp.com/writeback';\n\nfunction App() {\n  const [dataSource, updateDataSource] = useState([]);\n\n  useEffect(() => {\n    if(window.tableau.extensions.initializeAsync && dataSource.length === 0){\n        window.tableau.extensions.initializeAsync().then(() => {\n            console.log('Tableau initialized successfully');\n            const worksheets = window.tableau.extensions.dashboardContent.dashboard.worksheets;\n            worksheets.find(worksheet => worksheet.name === 'write_back').getDataSourcesAsync()\n            .then(dataSources => {\n                const dataSource = dataSources.find(dataSource => dataSource.name === 'write_back_data_source');\n                return dataSource.getUnderlyingDataAsync();\n            })\n            .then(dataTable => {\n                const data = dataTable.data;\n                const columns = dataTable.columns;\n                for(let i = 0; i < data.length; i++){\n                    // create a row\n                    const locationNameIndex = columns.findIndex(col => col.fieldName === 'Location Name');\n                    const locationNumberIndex = columns.findIndex(col => col.fieldName === 'Location Number');\n                    const forecastIndex = columns.findIndex(col => col.fieldName === 'Forecast');\n                    if(forecastIndex !==  -1 && locationNumberIndex !== -1 && locationNameIndex !== -1){\n                        // THIS ORDER MATTERS FOR NOW!!!!!\n                        const row = {\n                            location_number: data[i][locationNumberIndex].value,\n                            location_name: data[i][locationNameIndex].value,\n                            budget_year: '',\n                            on_deck_or_flag: '',\n                            budget_year_confirmed: '',\n                            comments: '',\n                            operator_status: '',\n                            region: '',\n                            site_status: '',\n                            construction_start: '',\n                            open_date: '',\n                            forecast: data[i][forecastIndex].value,\n                            operator_name: '',\n                            activation_date: '',\n                            contract_type_group: '',\n                            location_type: '',\n                            project_category: '',\n                            risk_weight_string: '',\n                        };\n                        dataSource.push(row)\n                    }\n                }\n                updateDataSource(cloneDeep(dataSource));\n            }).catch(err => console.log(err));\n        }).catch((err) => {\n            console.log(err);\n        })\n    }\n  }, [dataSource]);\n\n  const refreshDataSource = () => {\n    const worksheets = window.tableau.extensions.dashboardContent.dashboard.worksheets;\n    worksheets.find(worksheet => worksheet.name === 'write_back').getDataSourcesAsync()\n    .then(dataSources => {\n        const dataSource = dataSources.find(dataSource => dataSource.name === 'write_back_data_source');\n        return dataSource.refreshAsync();\n    })\n    .catch(err => console.log(err)); \n  }\n\n  const createXlxsFile = () => {\n    var wb = XLSX.utils.book_new();\n    wb.Props = {\n        Title: \"SheetJS Tutorial\",\n        Subject: \"Test\",\n        Author: \"Red Stapler\",\n        CreatedDate: new Date(2017,12,19)\n    };\n    \n    wb.SheetNames.push(\"Sheet1\");\n    var ws_data = [['location number', 'location name', 'budget year', 'on deck or flag', 'budget year confirmed', 'comments', 'operator status', 'region', 'site status', 'construction start', 'open date', 'forecast', 'operator name', 'activation date', 'contract type (group)', 'location type', 'project category', 'risk weight string']];\n    for(let i = 0; i < dataSource.length; i++){\n        const nextRow = [];\n        const rowValues = Object.values(dataSource[i]);\n        for(let j = 0; j < rowValues.length; j++){\n            if(typeof(rowValues[j]) !== 'object'){\n                nextRow.push(rowValues[j]); \n            }\n        }\n        ws_data.push(nextRow);\n    }\n    var ws = XLSX.utils.aoa_to_sheet(ws_data);\n    wb.Sheets[\"Sheet1\"] = ws;\n    var wbout = XLSX.write(wb, {bookType:'xlsx',  type: 'binary'});\n    function s2ab(s) {\n        var buf = new ArrayBuffer(s.length);\n        var view = new Uint8Array(buf);\n        for (var i=0; i<s.length; i++) view[i] = s.charCodeAt(i) & 0xFF;\n        return buf;\n    }\n\n    fetch(`${UPLOAD_URL}`, {\n        method: 'PUT',\n        body: new Blob([s2ab(wbout)],{type:\"application/octet-stream\"}),\n    });\n\n    setTimeout(() => {\n        refreshDataSource();\n    }, 3000)\n  }\n\n  return (\n    <div className=\"App\">\n      <div style={{ maxWidth: '100%' }}>\n        <MaterialTable\n          editable={{\n            onRowUpdate: (newData, oldData) =>\n            new Promise((resolve, reject) => {\n              setTimeout(() => {\n                {\n                  const index = dataSource.indexOf(oldData);\n                  dataSource[index] = newData;\n                  updateDataSource(cloneDeep(dataSource));\n                  createXlxsFile();\n                }\n                resolve()\n              }, 1000)\n            }),   \n          }}\n          // THIS ORDER MATTERS FOR NOW!!!!!\n          columns={[\n            { title: 'Location Number', field: 'location_number', editable: 'never'},\n            { title: 'Location Name', field: 'location_name', editable: 'never'},\n            { title: 'Budget Year', field: 'budget_year'},\n            { title: 'On Deck or Flag', field: 'on_deck_or_flag'},\n            { title: 'Budget Year Confirmed', field: 'budget_year_confirmed'},\n            { title: 'Comments', field: 'comments'},\n            { title: 'Operator Status', field: 'operator_status'},\n            { title: 'Region', field: 'region'},\n            { title: 'Site Status', field: 'site_status'},\n            { title: 'Construction Start', field: 'construction_start'},\n            { title: 'Open Date', field: 'open_date'},\n            { title: 'Forecast', field: 'forecast'},\n            { title: 'Operator Name', field: 'operator_name'},\n            { title: 'Activation Date', field: 'activation_date'},\n            { title: 'Contract Type (Group)', field: 'contract_type_group'},\n            { title: 'Location Type', field: 'location_type'},\n            { title: 'Project Category', field: 'project_category'},\n            { title: 'Risk Weight String', field: 'risk_weight_string'},\n          ]}\n          data={dataSource}\n          title=\"Write Back Demo\"\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}